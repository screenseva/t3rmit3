    /*
                   Byl's Loop

        We use the vonn3 evaluator, which provides us the
        states of our von Neumann neighbours in oldstate as:

            C C C C N N N W   W W E E E S S S

        https://en.wikipedia.org/wiki/Byl%27s_loop

    */

    rule.worldtype = 13;         // 2D torus world
    rule.patreq = "byl";
    rule.palreq = "byl";
    rule.ocodereq = "vonn3";

    /*  We compute the lookup table and hide it in rule.byl
        so we don't need to compute it on every invocation
        of the rule function.  */
    rule.byl = new Object();

    /*  The lut_byl array encodes the transition rules
        as 24 bit hexadecimal numbers in which the nybbles
        have the following meaning:

            C N E S W C'

        Each entry represents four actual entries in the lookup
        table, generated by rotational symmetry within the von
        Neumann neighbourhood.  Thus, an entry of:

            C N E S W C'

        is shorthand for the four entries:

            C N E S W C'
            C E S W N C'
            C S W N E C'
            C W N E S C'

        where C is the old state of the centre cell and C' is its
        new value.  The unpacking and mirror transform expansion
        into the lut_byl_v3 array is handled by the code below
        the table.  */

    rule.byl.lut_byl = [
        0x000000, 0x000400, 0x004400, 0x404104, 0x400244,
        0x401404, 0x142142, 0x244313, 0x400424, 0x113441,
        0x324511, 0x440034, 0x415004, 0x530044, 0x040055,
        0x050000, 0x344121, 0x400434, 0x440511, 0x415044,
        0x540045, 0x400114, 0x111422, 0x140511, 0x000012,
        0x510045, 0x000240, 0x211433, 0x142522, 0x200011,
        0x000020, 0x425044, 0x020054, 0x400224, 0x000140,
        0x322411, 0x241531, 0x100422, 0x435044, 0x524043,
        0x410054, 0x400134, 0x131411, 0x142311, 0x202411,
        0x200020, 0x413044, 0x314043, 0x420034, 0x020044,
        0x030000, 0x100411, 0x000411, 0x414034, 0x400044,
        0x141322, 0x101411, 0x423044, 0x002140, 0x000220,
        0x241333, 0x101422, 0x122411, 0x433044, 0x324043,
        0x400334, 0x001240, 0x100100, 0x000110, 0x133411,
        0x342311, 0x201433, 0x334043, 0x424034, 0x414044,
        0x200000, 0x000340, 0x020200, 0x143311, 0x302411,
        0x102422, 0x434034, 0x424044, 0x002300, 0x000122,
        0x103411, 0x221433, 0x434044, 0x222433, 0x002240,
        0x121422, 0x300411, 0x000434, 0x001340, 0x102200,
        0x200110, 0x104411, 0x440040, 0x020300, 0x124422,
        0x400014, 0x001300, 0x002120, 0x224303, 0x100200,
        0x003110, 0x004020, 0x002105, 0x201302, 0x004500,
        0x005240, 0x502104, 0x242152, 0x244323, 0x151425,
        0x123411, 0x004340, 0x402504, 0x305415, 0x541434,
        0x121452, 0x454045, 0x004540, 0x145325, 0x504410,
        0x442554, 0x455034, 0x544040, 0x424055, 0x400525,
        0x004040, 0x325411, 0x540334, 0x004450, 0x354040,
        0x400034, 0x534004, 0x004050, 0x004440, 0x400000,
        0x004030, 0x001040, 0x152404, 0x453404, 0x050500
    ];

    //  Construct lookup table, expanding and applying symmetry

    rule.byl.lut_byl_v3 = new Array(1 << 16);
    rule.byl.lut_byl_v3.fill(0);

    //  Example                  N   E   S   W
    rule.byl.osidx = function(c, n1, n2, n3, n4) {
        return (c  << 12) |
               (n1 <<  9) |
               (n2 <<  3) |
               (n4 <<  6) |
                n3;
    };

    for (var i = 0; i < rule.byl.lut_byl.length; i++) {
        /*  Transform cell states from table entry into
            vonn3 packed table index.  */
        var t = rule.byl.lut_byl[i];
        var tC  = (t >> 20),
            tN  = (t >> 16) & 7,
            tE  = (t >> 12) & 7,
            tS  = (t >>  8) & 7,
            tW  = (t >>  4) & 7,
            tCp =  t        & 0xF;

        /*  Now create four lookup table entries, all
            yielding the same tCp new state, with the
            four rotations of the specified neighbour
            cell states.  (Note that in some cases the
            rotations will be degenerate and set the same
            lookup table entry; no harm done.)  */

        rule.byl.lut_byl_v3[rule.byl.osidx(tC, tN, tE, tS, tW)] =
        rule.byl.lut_byl_v3[rule.byl.osidx(tC, tE, tS, tW, tN)] =
        rule.byl.lut_byl_v3[rule.byl.osidx(tC, tS, tW, tN, tE)] =
        rule.byl.lut_byl_v3[rule.byl.osidx(tC, tW, tN, tE, tS)] = tCp;
    }

    function byl(oldstate) {

        //  Extract self and neighbours from oldstate
        var N = (oldstate >> 9)  & 7,
            E = (oldstate >> 3)  & 7,
            S =  oldstate        & 7,
            W = (oldstate >> 6)  & 7,
            C = (oldstate >> 12) & 7;

        return rule.byl.lut_byl_v3[oldstate];
    }
